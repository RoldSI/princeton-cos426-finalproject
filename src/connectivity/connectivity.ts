import Peer, { DataConnection } from 'peerjs';
import { gameStateMachine, globalState } from '../app';
import { GamePlay } from '../gameplay';
import BaseScene from '../scenes/Scene';
import Player from '../objects/player/player';

export class Connectivity {
    public peer: Peer;
    private connection?: DataConnection;
    private playerId?: string;

    constructor() {
        this.peer = new Peer({
            host: '0.peerjs.com', // Use 'peerjs.com' for PeerJS cloud server
            port: 443,        // Change to 443 for cloud server
            path: '/',
        });

        // Log the generated ID
        this.peer.on('open', (id) => {
            this.playerId = id;
            console.log(`Your Player ID (generated by PeerJS): ${id}`);
        });

        // Listen for incoming connections
        this.peer.on('connection', (conn) => {
            this.connection = conn;
            console.log('Connection established as Player B');
            this.setupConnectionHandlers();
        });

        // Listen for errors
        this.peer.on('error', (err) => {
            console.error('PeerJS error:', err);
        });
    }

    // Method to access the player ID
    getPlayerId(): string | undefined {
        return this.playerId;
    }

    connectToPlayer(remotePlayerId: string): void {
        this.connection = this.peer.connect(remotePlayerId);
        console.log('Connection initiated as Player A');
        this.setupConnectionHandlers();
    }

    private setupConnectionHandlers(): void {
        if (!this.connection) return;

        // Listen for data
        this.connection.on('data', (data: any) => {
            console.log('Received:', data);
            switch (data.type) {
                case 'init':
                    const {playerA, playerB, scene} = data.content;
                    globalState.scene = BaseScene.fromJSON(scene);
                    globalState.gamePlay = new GamePlay(globalState.scene, Player.fromJSON(playerB), Player.fromJSON(playerA));
                    break;
                case 'start':
                    globalState.startOther = true;
                    break;
                default:
                    console.error('Unknown data type:', data.type);
            }
            gameStateMachine.update();
        });

        this.connection.on('open', () => {
            console.log('Data channel open!');
            gameStateMachine.update();
        });

        this.connection.on('close', () => {
            console.log('Connection closed.');
        });
    }

    sendData(data: any): void {
        if (this.connection && this.connection.open) {
            this.connection.send(data);
        } else {
            console.warn('Connection is not open. Cannot send data.');
        }
    }
}